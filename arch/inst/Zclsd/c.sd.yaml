# yaml-language-server: $schema=../../../schemas/inst_schema.json

$schema: "inst_schema.json#"
kind: instruction
name: c.sd
long_name: Store doubleword from even/odd register pair
description: |
  Stores a 64-bit value from registers xs2 and xs2+1.
  It computes an effective address by adding the zero-extended offset, scaled by 8,
  to the base address in register xs1.
  It expands to `sd xs2, offset(xs1)`.
  In RV32, xs2 must be an even-numbered register. Combinations with odd-numbered xs2 are reserved.
definedBy: Zclsd
assembly: xs2, offset(xs1)
encoding:
  RV32:
    match: 111-----------00
    variables:
      - name: xs2
        location: 4-2
      - name: xs1
        location: 9-7
      - name: imm
        location: 12-10|6-5
  RV64:
    match: 111-----------00
    variables:
      - name: xs2
        location: 4-2
      - name: xs1
        location: 9-7
      - name: imm
        location: 12-10|6-5
access:
  s: always
  u: always
  vs: always
  vu: always
operation(): |
  Bits<MXLEN> base = X[creg2reg(xs1)];
  Bits<MXLEN> offset = imm << 3;
  Bits<MXLEN> eff_addr = base + offset;

  if (xlen() == 32 && (creg2reg(xs2) % 2 != 0)) {
    raise(ExceptionCode::IllegalInstruction, mode(), $encoding);
  }

  Bits<128> data = {X[creg2reg(xs2)+1], X[creg2reg(xs2)]};
  write_memory<64>(eff_addr, data, $encoding);
sail(): "" # Not implemented in the Sail model yet
